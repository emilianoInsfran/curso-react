{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","console","log","GifGridItem","className","src","GifGrid","count","setCount","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","onClick","GifExpertApp","categorias","setCategorias","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAsB,IAAnBC,EAAkB,EAAlBA,YAE3B,EAAoCC,mBAAS,cAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,mCACI,sBAAMC,SAVO,SAACC,GAClBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAY,SAAAS,GAAI,OAAMP,GAAN,mBAAoBO,OACpCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SAlBU,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,e,+BCNlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAUH,GAD9C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QAKzCa,QAAQC,IAAIR,GAdO,kBAgBZA,GAhBY,4CAAH,sDCAPS,EAAc,SAAC,GAAsB,IAApBN,EAAmB,EAAnBA,GAAGC,EAAgB,EAAhBA,MAAMV,EAAU,EAAVA,IAGnC,OAFAa,QAAQC,IAAIL,EAAGC,EAAMV,GAGjB,sBAAKgB,UAAU,OAAf,UACI,qBAAKC,IAAKjB,EAAKU,MAAOA,IACtB,6BAAKA,QCFJQ,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAEtB,EAA2Bd,mBAAS,GAApC,mBAAQmC,EAAR,KAAeC,EAAf,KAQA,ECZwB,SAACtB,GACzB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLgB,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAdAC,qBAAU,WACN3B,EAAQC,GACH2B,MAAK,SAAAjB,GAEFkB,YAAW,WACPH,EAAS,CACLlB,KAAKG,EACLa,SAAQ,MAEb,UAGb,CAACvB,IAEIwB,EDRuBK,CAAa7B,GAA/Ba,EAAZ,EAAON,KAAYgB,EAAnB,EAAmBA,QACnB,OACI,mCACA,gCACI,6BAAMvB,IACN,6BAAMuB,EAAS,cAAgB,iBAC9BA,GAAW,wCACZ,wBAAQO,QAAS,kBAAIR,EAAUD,EAAQ,IAAvC,gBAEA,6BAEQR,EAAOJ,KAAK,SAACC,GAAD,OAER,aADJ,CACK,EAAD,eAA8BA,GAAZA,EAAIC,eEzBjCoB,EAAe,WAExB,MAAoC7C,mBAAS,CAAC,cAA9C,mBAAO8C,EAAP,KAAmBC,EAAnB,KAQA,OACI,qCACI,6CACA,cAAC,EAAD,CAAahD,YAAcgD,IAE3B,6BAEQD,EAAWvB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CACAA,SAAWA,GACLA,Y,MCnB9BkC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4a58d8df.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';//validaciones\r\n\r\nexport const AddCategory = ( { setCategory } )=> {//utilice la desestructuración de objetos, no use los props (quedaria sino props.setCategory)\r\n\r\n    const [inputValue, setInputValue] = useState('Hola mundo');\r\n\r\n    const handleInputChange = (e)=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()\r\n        if(inputValue.trim().length > 2){//trim borra los espacio dentro de un string\r\n            setCategory(cats => [ inputValue,...cats,])\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit= { handleSubmit }>\r\n                <input\r\n                    type=\"text\"\r\n                    value={ inputValue }\r\n                    onChange={ handleInputChange }\r\n                /> \r\n            </form>\r\n        </>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategory: PropTypes.func.isRequired,//le digo que tieene que ser una funcion y que sea obligatorio (props) - \r\n}","\r\n\r\nexport const getGifs = async(category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=oyVU57SQsDZhUJQXdg6gKVbSsAX7FWwa`;//encodeURI remplaza los espacios y tamaño de la letra apra que lo envie correctamente\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();//utilizo la desestruturación para que me muestre solo el array conla info poniendole {} a data\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id:img.id,\r\n            title:img.title,\r\n            url:img.images?.downsized_medium.url\r\n\r\n        }\r\n    })\r\n\r\n    console.log(gifs);\r\n\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ( {id,title,url} ) => {\r\n    console.log(id,title,url)\r\n    // //como class es una palabra reservada de js le pusieron className\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} title={title}/>\r\n            <h2>{title}</h2>\r\n        </div>\r\n    )\r\n} ","import React, { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n//useEffect: me parmite ejecutar sierto codigo de manera condicional\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const  [count, setCount] = useState(0); \r\n    //const [ images, setImages] = useState([]); \r\n\r\n    // useEffect( () => {//quiero que se ejecute cuando el componente es renderizado por primera vez\r\n    //     getGifs(category).then(setImages);\r\n    // },[category])//el segundo argumento [] es una array de argumentos si quiero que se ejecute una vez lo dejo como un array vacio, pero si la categoria cambia se vuelve a ejecutar\r\n//{loading && <p>Loading</p>} si es verdadero pone el loading, sino, no hace nada. otra forma de validación\r\n//podemos renombrar data  poniendo dos puntos: data:images\r\n    const {data:images,loading} = useFetchGifs(category);//custom hooks\r\n    return (\r\n        <>\r\n        <div>\r\n            <h3>{ category }</h3>\r\n            <h3>{ loading? 'cargando...' : 'data cargada' }</h3>\r\n            {loading && <p>Loading</p>}\r\n            <button onClick={()=>setCount( count + 1 )}>+1</button>\r\n\r\n            <ol>\r\n                {\r\n                    images.map( (img) =>(\r\n                    // images.map( ({id,title}) =>(\r\n                        <GifGridItem key={img.id} {...img}/>//estoy enviando cada propiedad como una independiente (es un ejemplo pero usas los props)\r\n                        // <li key={id}>{ title }</li>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </div>\r\n        </>\r\n    )\r\n}","//custom hook (los hooks son funciones) se le pone use adelante del nombre, es un estandar nombrarlo así\r\nimport { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category)=> {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n            .then(img =>{\r\n\r\n                setTimeout(() => {\r\n                    setState({//se dispara y renderiza la DOM con la nueva info \r\n                        data:img,\r\n                        loading:false\r\n                    })\r\n                }, 3000);\r\n\r\n        })\r\n    },[category]);\r\n\r\n    return state;//retorna {data:[], loading:true};\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = ()=>{\r\n    //const categorias = ['One punch', 'Dragon Ball','Star war' ]\r\n    const [categorias, setCategorias] = useState(['One punch' ]);\r\n\r\n    /*const handleAdd = () => {\r\n        setCategorias( [...categorias,'twd'] )//modifico su estado inicial  con... llamos LOS valores del array que tiene, mas el nuevo elemento TWD \r\n        //setCategorias( cats => [ ...cats,'TWD'])//otra forma de hacerlo       \r\n    }*/\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>Gift Expert</h2>\r\n            <AddCategory setCategory={ setCategorias } />\r\n            {/* <button onClick={ handleAdd }>hola</button> */}\r\n            <ol>\r\n                {\r\n                    categorias.map( category =>(\r\n                        <GifGrid \r\n                        category={ category }\r\n                        key={ category }\r\n                        />\r\n                        // return <li key={category}>{category} </li>\r\n                    ))\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n//\n"],"sourceRoot":""}